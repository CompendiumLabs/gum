// prompt tools

import { useMemo } from 'react'

import { useDocCache } from './utils'

//
// system prompts
//

import meta from '../docs/meta.json?json'
import prompt from '../gen/prompt.md?raw'
import docs from '../gen/docs.md?raw'
import diff from '../gen/diff_block.md?raw'
import launch from '../gen/launch.md?raw'

//
// generation prompts
//

const image_start = has_image => has_image ? 'The user has provided the image above to use as a reference. The image may be a sketch or a screenshot of how they want the image that is generated by this code to look. ' : ''

const image_refine = has_image => has_image ? 'The user has provided the above image which shows the SVG output of the current code. Use this as a reference, and keep in mind that if it is mostly or entirely blank, there may be an issue with the code.\n\n' : ''

const error_refine = error => error ? `The current code is producing the following error message:\n\n${error}\n\nPlease attempt to fix the error while also addressing the query.\n\n` : ''

const prompt_start = (query, has_image) => `Using the guidelines, documentation, and examples provided above, generate JavaScript code for the \`gum.jsx\` library that addresses the following query. ${image_start(has_image)}Please be concise and return only the best implementation possible. Failure is not an option.

QUERY: ${query}`

const prompt_refine = (query, code, error, has_image) => `The user now wishes to refine the code you've generated. Here is the current state of the code, which may have been manually edited after generation:

\`\`\`javascript
${code}
\`\`\`

${error_refine(error)}${image_refine(has_image)}Please return modified code to satisfy the following query. Be sure to either return raw code or fence it in \`\`\`javascript\`\`\` tags.

QUERY: ${query}`

const prompt_refine_diff = (query, code, error, has_image) => `The user now wishes to refine the code you've generated. Here is the current state of the code, which may have been manually edited after generation:

\`\`\`javascript
${code}
\`\`\`

${error_refine(error)}${image_refine(has_image)}If the changes to the code are relatively small, please provide a diff in unified format to satisfy the following query (wrap in \`\`\`diff\`\`\` tags). If the changes are more complex, you can simply return the entire new code (wrap in \`\`\`javascript\`\`\` tags).

QUERY: ${query}`

const prompt_refine_block = (query, code, error, has_image) => `The user now wishes to refine the code you've generated. Here is the current state of the code, which may have been manually edited after generation:

\`\`\`javascript
${code}
\`\`\`

${error_refine(error)}${image_refine(has_image)}If the changes to the code are relatively small, please provide a diff in the form of one or more search and replace blocks like the ones seen in git merge conflicts (wrap in \`\`\`diff\`\`\` tags). If the changes are more complex, you can simply return the entire new code (wrap in \`\`\`javascript\`\`\` tags).

QUERY: ${query}`

//
// system prompt
//

// replace links with bold and push headings
function prepareText(text) {
  text = text.replace(/\[(.*?)\]\((.*?)\)/g, '**$1**')
  text = text.replace(/^# (.*?)$/gm, '## $1')
  return text.trim()
}

// if there's a comment on line one, that's the query
function prepareCode(text) {
  const [ first, ...rest ] = text.split('\n')
  const query = first.replace(/^\/\/(.*?)$/, '$1').trim()
  const code = `\`\`\`jsx\n${rest.join('\n').trim()}\n\`\`\``
  return `**Example**\n\nQUERY: ${query}\n\nRESPONSE:\n\n${code}`
}

// generate docs for all pages
function useSystem() {
  const cache = useDocCache()

  // load docs async
  return useMemo(() => {
    // wait until cache is loaded
    if (!cache) return null

    // construct system promot
    const pageList = Object.values(meta).flat()
    const pages = pageList.map(page => {
      const tag = page.toLowerCase()
      const text_raw = cache.text.get(tag)
      const code_raw = cache.code.get(tag)
      const text = prepareText(text_raw)
      const code = prepareCode(code_raw)
      return `${text}\n\n${code}`
    })

    // make system prompt
    return `${prompt.trim()}\n\n${docs.trim()}\n\n${pages.join('\n\n')}\n\n${diff.trim()}\n\n${launch.trim()}`
  }, [ cache ])
}

//
// prompt creation
//

function getRefine(diff_type) {
  if (diff_type == 'none') {
    return prompt_refine
  } else if (diff_type == 'unified') {
    return prompt_refine_diff
  } else if (diff_type == 'block') {
    return prompt_refine_block
  } else {
    throw new Error(`Unknown diff type: ${diff_type}`)
  }
}

function makePrompt(query, { code = '', error = null, diff_type = 'none', has_image = false } = {}) {
  return (code.length > 0) ? getRefine(diff_type)(query, code, error, has_image) : prompt_start(query, has_image)
}

function makeContent(text, imgdata) {
  if (imgdata != null) {
    return { text, image: imgdata }
  } else {
    return text
  }
}

//
// extraction tools
//

function extractCode(text) {
  // strip out <thinking>...</thinking>
  text = text.replace(/<thinking>([\s\S]*?)<\/thinking>/g, '')

  // detect language from first code block
  const match = text.match(/```(javascript|diff)\n/)
  const lang = match ? match[1] : 'javascript'

  // strip out all code block markers
  const code = text.replace(/```.*(\n|$)/g, '')

  // return code information
  return { lang, code }
}

//
// export
//

export { useSystem, makePrompt, makeContent, extractCode }
